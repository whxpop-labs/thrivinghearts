# Orb 'circleci/node@5' resolved to 'circleci/node@5.2.0'
# Orb 'vidsy/typescript@1.2.1' resolved to 'vidsy/typescript@1.2.1'
version: 2
jobs:
  build-node:
    docker:
    - image: cimg/node:lts
    resource_class: large
    steps:
    - checkout
    - run:
        command: |-
          #!/usr/bin/env bash

          # Fail if package.json does not exist in working directory

          if [ ! -f "package.json" ]; then
              echo
              echo "---"
              echo "Unable to find your package.json file. Did you forget to set the app-dir parameter?"
              echo "---"
              echo
              echo "Current directory: $(pwd)"
              echo
              echo
              echo "List directory: "
              echo
              ls
              exit 1
          fi
        name: Checking for package.json
        working_directory: .
    - run:
        command: |
          #!/usr/bin/env bash

          TARGET_DIR="/tmp"
          if [ -n "$HOMEDRIVE" ]; then
              TARGET_DIR="$HOMEDRIVE\\tmp"
          fi

          # Link corresponding lock file to a temporary file used by cache commands
          if [ -f "package-lock.json" ]; then
              echo "Found package-lock.json file, assuming lockfile"
              cp package-lock.json "$TARGET_DIR"/node-project-lockfile
          elif [ -f "npm-shrinkwrap.json" ]; then
              echo "Found npm-shrinkwrap.json file, assuming lockfile"
              cp npm-shrinkwrap.json "$TARGET_DIR"/node-project-lockfile
          elif [ -f "yarn.lock" ]; then
              echo "Found yarn.lock file, assuming lockfile"
              cp yarn.lock "$TARGET_DIR"/node-project-lockfile
          else
              echo "Found no lockfile, adding empty one"
              touch "$TARGET_DIR"/node-project-lockfile
          fi

          cp package.json "$TARGET_DIR"/node-project-package.json
        name: Determine lockfile
        working_directory: .
    - restore_cache:
        keys:
        - node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "/tmp/node-project-lockfile" }}
        - node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "/tmp/node-project-package.json" }}
        - node-deps-{{ arch }}-v1-{{ .Branch }}-
    - run:
        command: |-
          #!/usr/bin/env bash

          # Run override ci command if provided, otherwise run default yarn install
          if [[ -n "$PARAM_OVERRIDE_COMMAND" ]]; then
              echo "Running override package installation command:"
              eval "$PARAM_OVERRIDE_COMMAND"
          else
              yarn install --frozen-lockfile
          fi
        environment:
          PARAM_OVERRIDE_COMMAND: ''
          YARN_CACHE_FOLDER: ''
        name: Installing YARN packages
        working_directory: .
    - save_cache:
        key: node-deps-{{ arch }}-v1-{{ .Branch }}-{{ checksum "/tmp/node-project-lockfile" }}
        paths:
        - ./node_modules
    - run:
        command: rm -f /tmp/node-project-lockfile /tmp/node-project-package.json /tmp/yarn-zero-lockfile
        name: Remove temporary links
    - run:
        command: tsc
        name: Build TypeScript
    - run:
        name: Create the ~/artifacts directory if it doesn't exist
        command: mkdir -p ~/artifacts
    - run:
        name: Copy artifacts
        command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
    - store_artifacts:
        path: ~/artifacts
        destination: node-build
workflows:
  build:
    jobs:
    - build-node
  version: 2

# Original config.yml file:
# # This config was automatically generated from your source code
# # Stacks detected: deps:node:.,package_manager:yarn:
# version: 2.1
# orbs:
#   node: circleci/node@5
#   typescript: vidsy/typescript@1.2.1
# jobs:
#   build-node:
#     # Build node project
#     executor: node/default
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: yarn
#       - run:
#           command: tsc
#           name: Build TypeScript
#       - run:
#           name: Create the ~/artifacts directory if it doesn't exist
#           command: mkdir -p ~/artifacts
#       # Copy output to artifacts dir
#       - run:
#           name: Copy artifacts
#           command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
#       - store_artifacts:
#           path: ~/artifacts
#           destination: node-build
#   deploy:
#     # This is an example deploy job, not actually used by the workflow
#     docker:
#       - image: cimg/base:stable
#     steps:
#       # Replace this with steps to deploy to users
#       - run:
#           name: deploy
#           command: '#e.g. ./deploy.sh'
# workflows:
#   build:
#     jobs:
#       - build-node
#     # - deploy:
#     #     requires:
#     #       - build-node